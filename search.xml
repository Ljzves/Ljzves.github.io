<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Leaves's Code Style for OI]]></title>
    <url>%2F2017%2F08%2F07%2FCode%20Style%2F</url>
    <content type="text"><![CDATA[本文介绍Leaves遵循的代码规范。这是一种基于Google Code Style的代码规范。 如对某项的目的或含义有不理解的地方请留言。 1.命名约定1.1 通用命名规则尽可能少用缩写，要有描述性。除非是一些广为人知的缩写。 1.2 文件命名文件名要全部小写, 可以包含下划线 (_)。 1.3 类型命名类, 结构体, 类型定义 (typedef), 枚举, 类型模板参数名称的每个单词首字母均大写, 不包含下划线。 1.4 变量命名变量 (包括函数参数) 和数据成员名一律小写, 单词之间用下划线连接. 类的成员变量以下划线结尾, 但结构体的就不用, 如: alocal_variable, a_struct_data_member, a_class_data_member. 1.5 常量命名命名时以 “k” 开头，大小写混合。 1.6 函数命名常规函数使用大小写混合， 取值和设值函数则要求与变量名匹配。 2.类2.1 类和结构体struct仅包含成员变量、构造函数、析构函数，其它一概使用 class。为了和 STL 保持一致，对于仿函数等特性可以使用struct。 2.2 运算符重载尽可能不要重载运算符。 禁止创建用户定义字面量。 2.3 声明顺序类定义一般应以 public: 开始, 后跟 private:在每一部分中，按如下顺序申明：构造函数，析构函数，重载运算符，其它函数，成员变量。 3.格式大括号换行不换行均可，因为本人大括号不换行，下面的例子大括号均不换行。 3.1 行长度每一行代码字符数不超过80。 3.2 缩进把Tab改成两格空格缩进。 3.3 函数的声明定义调用返回类型和函数名在同一行, 参数也尽量放在同一行, 如果放不下就对形参分行。说明：参数不换行：1234ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) &#123; DoSomething(); ...&#125; 参数换行：12345ReturnType ClassName::FunctionName(Type par_name1, Type par_name2, Type par_name3) &#123; DoSomething(); ...&#125; 参数换行’：1234567ReturnType LongClassName::ReallyReallyReallyLongFunctionName( Type par_name1, // 4 space indent Type par_name2, Type par_name3) &#123; DoSomething(); // 2 space indent ...&#125; 3.4 IF语句 倾向于不在圆括号内使用空格。 关键字 if 和 else 另起一行。 if 和左圆括号间都有空格。右圆括号和左大括号之间有空格。 当且仅当语句简单并且没有使用 else 子句时，可以将代码写在一行。 单行语句不需要使用大括号，如果你喜欢用也没问题。 语句中某个 if-else 分支使用了大括号的话，其它分支也必须使用。 允许的：12345678910111213if (condition) &#123; ... // 2 空格缩进.&#125; else if (...) &#123; ...&#125; else &#123; ...&#125;if (x == kFoo) return new Foo();if (condition) &#123; foo;&#125; else &#123; bar;&#125; 不允许的：12345678if (condition)&#123; // 缺少空格if (x) DoThis(); // 有else但是没有换行else DoThat();if (condition) // else有大括号但是if没有 foo;else &#123; bar;&#125; 3.5 选择语句格式如下：12345678910111213switch (var) &#123; case 0: &#123; // 2 空格缩进 ... // 4 空格缩进 break; &#125; case 1: &#123; ... break; &#125; default: &#123; assert(false); &#125;&#125; 3.6 循环语句 在单语句循环里，括号可用可不用。 空循环体应使用 {} 或 continue，而不是一个简单的分号。 3.7 指针和引用表达式点或箭头前后不要有空格。指针/地址操作符 (*, &amp;) 之后不能有空格。 3.8 布尔表达式 如果一个布尔表达式超过 标准行宽，需要断行。 逻辑与 (&amp;&amp;) 操作符总位于行尾。 直接用符号形式的操作符，如 &amp;&amp; 和 ~，不要用词语形式的 and 和 compl。 3.9 函数返回值不要在 return 表达式里加上非必须的圆括号. 3.10 类格式依次申明 public:, private:每个关键词都缩进 1 个空格。关键词前空一行。栗子：12345678910111213141516class MyClass &#123; public: // 注意有一个空格的缩进 MyClass(); // 标准的两空格缩进 explicit MyClass(int var); ~MyClass() &#123;&#125; void SomeFunction(); void SomeFunctionThatDoesNothing() &#123; &#125; void set_some_var(int var) &#123; some_var_ = var; &#125; int some_var() const &#123; return some_var_; &#125; private: bool SomeInternalFunction(); int some_var_; int some_other_var_;&#125;; 3.11 构造函数初始值列表123456789101112131415161718192021222324// 如果所有变量能放在同一行:MyClass::MyClass(int var) : some_var_(var) &#123; DoSomething();&#125;// 如果不能放在同一行,// 必须置于冒号后, 并缩进 4 个空格MyClass::MyClass(int var) : some_var_(var), some_other_var_(var + 1) &#123; DoSomething();&#125;// 如果初始化列表需要置于多行, 将每一个成员放在单独的一行// 并逐行对齐MyClass::MyClass(int var) : some_var_(var), // 4 space indent some_other_var_(var + 1) &#123; // lined up DoSomething();&#125;// 右大括号 &#125; 可以和左大括号 &#123; 放在同一行// 如果这样做合适的话MyClass::MyClass(int var) : some_var_(var) &#123;&#125; 3.12 水平留白永远不要在行尾添加没意义的留白.通用：1234567891011121314void f(bool b) &#123; // 左大括号前总是有空格. ...int i = 0; // 分号前不加空格.// 列表初始化中大括号内的空格是可选的.// 如果加了空格, 那么两边都要加上.int x[] = &#123; 0 &#125;;int x[] = &#123;0&#125;;class Foo : &#123; public: // 对于单行函数的实现, 在大括号内加上空格 // 然后是函数实现 Foo(int b) : Bar(), baz_(b) &#123;&#125; // 大括号里面是空的话, 不加空格. void Reset() &#123; baz_ = 0; &#125; // 用括号把大括号与实现分开. ... 循环和条件语句1234567891011121314if (b) &#123; // if 条件语句和循环语句关键字后均有空格.&#125; else &#123; // else 前后有空格.&#125;while (test) &#123;&#125; // 圆括号内部不紧邻空格.switch (i) &#123;for (int i = 0; i &lt; 5; ++i) &#123;switch ( i ) &#123; // 循环和条件语句的圆括号里可以与空格紧邻.if ( test ) &#123; // 圆括号, 但这很少见. 总之要一致.for ( int i = 0; i &lt; 5; ++i ) &#123;for ( ; i &lt; 5 ; ++i) &#123; // 循环里内 ; 后恒有空格, ; 前可以加个空格.switch (i) &#123; case 1: // switch case 的冒号前无空格. ... case 2: break; // 如果冒号有代码, 加个空格. 操作符12345678910// 赋值运算符前后总是有空格.x = 0;// 其它二元操作符也前后恒有空格, 不过对于表达式的子式可以不加空格.// 圆括号内部没有紧邻空格.v = w * x + y / z;v = w*x + y/z;v = w * (x + z);// 在参数和一元操作符之间不加空格.x = -5;++x; 3.13 垂直留白垂直留白越少越好。 4 其他 尽可能不使用 using namespace std; 和 #include 尽可能将算法和数据结构用class封装 版权声明： 本博客所有文章除特别声明外，均采用CC BY-NC-SA 4.0 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>OI</tag>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性规划学习笔记]]></title>
    <url>%2F2017%2F06%2F19%2F%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[线性规划综述 一般线性规划在一般线性规划问题中，我们希望优化一个满足一组线性不等式约束的线性函数。已知一组实数$a_1,a_2,\cdots,a_n$和一组变量$x_1,x_2,\cdots,x_n$。我们定义在这些变量上的一个线性函数 $f$： f(x_1,x_2,\cdots,x_n)=a_1x_1+a_2x_2+\cdots+a_nx_n=\sum_{j=1}^{n}a_jx_j不等式 f(x_1,x_2,\cdots,x_n)\le b 和 f(x_1,x_2,\cdots,x_n)\ge b 是线性不等式。 栗子下面我们举一个具体的栗子🌰。 考虑具有两个变量的线性规划： 最大化 x_1\quad+\quad x_2\tag{*} 满足约束 \begin{align} 4x_1\;-\;x_2\;&\le\;8\\ 2x_1\;+\;x_2\;&\le10\\ 5x_1\;-\;2x_2&\ge-2 \\ x_1,\;x_2\quad&\ge\;0 \end{align}我们称所有满足约束式的变量$x_1$和$x_2$的取值为一个线性规划的一个可行解。这些可行解在二维空间中构成一个凸区域。这个凸型区域称为可行区域，希望最大化的函数称为目标函数。 单纯型算法学过中学线性规划的同学都知道： 线性规划的最优解是在可行区域的一个顶点上。 如果一个顶点所代表的值比与他相邻的所有顶点的值优，该顶点即为最优解。【局部最优即为全局最优】 这样的结论在超过两个变量的线性规划中也成立。单纯性算法就是一个一直沿着单纯型的一条边从当前顶点移动到一个目标值不小于当前顶点的相邻顶点的算法。 标准型 松弛型 代码 模板题链接 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class LinearProgramming &#123; public: LinearProgramming(int n, int m) : n_(n), m_(m) &#123; int k; for (int i = 1; i &lt;= n; ++i) &#123;k = read(); a_[0][i] = k;&#125; for (int i = 1; i &lt;= m; ++i) &#123; for (int j = 1; j &lt;= n; ++j) &#123;k = read(); a_[i][j] = k;&#125; k = read(); a_[i][0] = k; &#125; &#125; void simplex() &#123; for (int i = 1; i &lt;= n_; ++i) nonbasic_vars_[i] = i; for (int i = 1; i &lt;= m_; ++i) basic_vars_[i] = i+n_; int x, y; while (1) &#123; x = y = 0; for (int i = 1; i &lt;= m_; ++i) if (a_[i][0] &lt; -kEps) &#123;y = i; break;&#125; if (!y) break; for (int i = 1; i &lt;= n_; ++i) if (a_[y][i] &lt; -kEps) &#123;x = i; if (rand()%3 == 0) break;&#125; if (!x) &#123;puts("Infeasible"); return;&#125; pivot(x, y); &#125; while (1) &#123; x = 0; for (int i = 1; i &lt;= n_; ++i) if (a_[0][i] &gt; kEps) &#123;x = i; break;&#125; if (!x) break; double k = kInf; for (int i = 1; i &lt;= m_; ++i) if (a_[i][x] &gt; kEps &amp;&amp; a_[i][0]/a_[i][x] &lt; k) &#123; y = i; k = a_[i][0]/a_[i][x]; &#125; if (k == kInf) &#123;puts("Unbounded"); return;&#125; pivot(x, y); &#125; printf("%.8lf\n", -a_[0][0]); if (!type) return; for (int i = 1; i &lt;= n_; ++i) a_[0][i] = 0; for (int i = 1; i &lt;= m_; ++i) if (basic_vars_[i] &lt;= n_) a_[0][basic_vars_[i]] = a_[i][0]; for (int i = 1; i &lt;= n_; ++i) printf("%.8lf ", a_[0][i]); &#125; private: int n_, m_, basic_vars_[kM], nonbasic_vars_[kN]; double a_[kM][kN]; void pivot(int x, int y) &#123; for (int i = 0; i &lt;= n_; ++i) if (i != x) a_[y][i] /= a_[y][x]; a_[y][x] = 1/a_[y][x]; for (int i = 0; i &lt;= m_; ++i) &#123; if (i == y) continue; for (int j = 0; j &lt;= n_; ++j) if (j != x) a_[i][j] -= a_[i][x]*a_[y][j]; a_[i][x] *= -a_[y][x]; &#125; std::swap(nonbasic_vars_[x], basic_vars_[y]); &#125;&#125;; 版权声明： 本博客所有文章除特别声明外，均采用CC BY-NC-SA 4.0 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>OI</tag>
        <tag>笔记</tag>
        <tag>线性规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后缀数组学习笔记]]></title>
    <url>%2F2017%2F05%2F22%2F%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[定义字符串$s$的起始位置为1长度为$len$，$s[i]$表示字符串第$i$位的字符。后缀：用$suff[i]$表示由$s[i]~s[len]$组成的字符串。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>笔记</tag>
        <tag>后缀数组</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络流笔记]]></title>
    <url>%2F2017%2F05%2F22%2F%E6%9C%80%E5%A4%A7%E6%B5%81%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[网络流是什么是网络流是一种类比水流的解决问题方法，与线性规划密切相关。虽然模型简单，但是应用却十分广泛。 Dinic算法Dinic算法是一种对于网络流问题的增广路算法，它通过对残量网络进行分层，并在层次图上寻找增广路的方式，实现了在$O(n^2m)$的时间内求出网络的最大流。在加入多路增广和当前弧优化后，复杂度远小于理论上界。 变量解释$no[x]$是点$x$的指针 $level$：表示层数 $fir$：表示邻接表中的第一条边 $curr$：当前弧优化，表示目前访问到的边 $Edge*$ 是边指针 $next$：表示下一条边 $to$：表示指向节点 $res$：表示反向边 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Dinic &#123; public: int operator() (int s, int t, int n) &#123; int max_flow = 0; while (bfs(&amp;no[s], &amp;no[t], n)) &#123; max_flow += dfs(&amp;no[s], &amp;no[t]); &#125; return max_flow; &#125; private: // 建立层次网络 bool bfs(Node *s, Node *t, int n) &#123; for (int i = 1; i &lt;= n; ++i) &#123; no[i].level = -1; no[i].curr = no[i].fir; &#125; std::queue&lt;Node *&gt; q; s-&gt;level = 1; q.push(s); while (!q.empty()) &#123; Node *v = q.front(); q.pop(); for (Edge *e = v-&gt;fir; e; e = e-&gt;next) &#123; if (e-&gt;flow != 0 &amp;&amp; e-&gt;to-&gt;level == -1) &#123; e-&gt;to-&gt;level = v-&gt;level+1; if (e-&gt;to == t) return true; q.push(e-&gt;to); &#125; &#125; &#125; return false; &#125; // 寻找增广路 int dfs(Node *s, Node *t, int limit = oo) &#123; if (s == t) return limit; int cnt_flow = 0; // cnt_flow 记录已使用的流量，以达到多路增广的效果 for (Edge *&amp;e = s-&gt;curr; e; e = e-&gt;next) &#123; // 注意 *&amp;e 这样才能起到当前弧优化的效果 if (e-&gt;flow != 0 &amp;&amp; e-&gt;to-&gt;level == s-&gt;level+1) &#123; int flow = dfs(e-&gt;to, t, std::min(limit-cnt_flow, e-&gt;flow)); cnt_flow += flow; e-&gt;flow -= flow; e-&gt;res-&gt;flow += flow; if (cnt_flow == limit) return cnt_flow; &#125; &#125; if (cnt_flow != limit) s-&gt;level = -1; // 这是个小优化，至于为什么留给读者自己思考。 return cnt_flow; &#125;&#125;dinic; 模板题地址LYOI 重要结论及模型 记 $ S $ 为源点，$T$为汇点，$c(u,v)$为在点u,v之间的容量。 最大流最小割定理 最大流等于最小割 详细证明请参考《最小割模型在信息学竞赛中的应用》hbt hbt. 胡伯涛 2007年国家集训队论文《最小割模型在信息学竞赛中的应用》 &#8617; 二分图最大匹配构图设二分图\(G=(V_1,V_2,E)\)$\begin{cases}c(s,u) = 1,&amp;u\in V_1\c(u,v)=1,&amp;\langle u,v\rangle\in E\c(v,t)=1,&amp;v\in V_2\end{cases}$答案就是最大流 模型理解这个模型比较好理解，因为每个点的流量至多为1，保证了每个点只能用一次。 方案输出遍历第二部分的边，如果满流则就是一对匹配。 最大权闭合子图构图 \begin{cases} c(u,v)=\infty,&\langle u,v\rangle\in E\\ c(s,u)=w_u,&w_u>0\\ c(u,t)=-w_u,&w_u0]-maxflow;模型理解证明比较复杂，详细证明请参考hbt。 方案输出最小割即为方案 最小路径覆盖构图 将一个点拆成两个点一个表示入，一个表示出，答案就是最大匹配。 上下界网络流推荐阅读Menci的blog。很详细，对四种情况都进行了讨论。]]></content>
      <tags>
        <tag>OI</tag>
        <tag>笔记</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt学习笔记]]></title>
    <url>%2F2017%2F05%2F18%2Fqt%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1、常用控件菜单栏123456789101112131415#include &lt;QMenuBar&gt;#include &lt;QMenu&gt;#include &lt;QAction&gt;...// 菜单栏QMenuBar *mBar = menuBar();// 添加菜单QMenu *pFile = mBar-&gt;addMenu("文件");// 菜单项和动作QAction *pNew = pFile-&gt;addAction("新建");connect(pNew, &amp;QAction::triggered, [=]() &#123; qDebug() &lt;&lt; "新建被触发";&#125;);pFile-&gt;addSeparator(); // 分割线QAction *pOpen = pFile-&gt;addAction("打开"); 工具栏工具栏的实质是菜单栏的快捷方式 123456#include &lt;QToolBar&gt;...QToolBar *toolBar = addToolBar(&quot;toolBar&quot;);toolBar-&gt;addAction(pNew);QPushButton *qButton = new QPushButton(this);toolBar-&gt;addWidget(qButton); 状态栏12345678#include &lt;QStatusBar&gt;...QStatusBar *sBar = statusBar();QLabel *lable = new QLabel(this); lable-&gt;setText(&quot;Normal&quot;);sBar-&gt;addWidget(lable);sBar-&gt;addWidget(new QLabel(&quot;2&quot;, this));sBar-&gt;addPermanentWidget(new QLabel(&quot;3&quot;, this)); 核心控件核心控件有很多这里只是随便展示一种 1234#include &lt;QTextEdit&gt;...QTextEdit *textarea = new QTextEdit(this);setCentralWidget(textarea); 浮动窗口123456#include &lt;QDockWidget&gt;... QDockWidget *dw = new QDockWidget(this);addDockWidget(Qt::RightDockWidgetArea, dw);QTextEdit *textarea2 = new QTextEdit(this);dw-&gt;setWidget(textarea2); 对话框1234567891011121314151617181920212223242526272829303132333435363738QMenuBar *mBar = menuBar(); setMenuBar(mBar);QMenu *menu = mBar-&gt;addMenu(&quot;对话框&quot;);QAction *p1 = menu-&gt;addAction(&quot;模态对话框&quot;);connect(p1, &amp;QAction::triggered, [=]() &#123; QDialog dlg; dlg.exec(); qDebug() &lt;&lt; &quot;1&quot;;&#125;);QAction *p2 = menu-&gt;addAction(&quot;非模态对话框&quot;);connect(p2, &amp;QAction::triggered, [=]() &#123; QDialog *dlg = new QDialog; dlg-&gt;setAttribute(Qt::WA_DeleteOnClose); dlg-&gt;show(); qDebug() &lt;&lt; &quot;2&quot;;&#125;);QAction *p3 = menu-&gt;addAction(&quot;关于对话框&quot;);connect(p3, &amp;QAction::triggered, [=]() &#123; QMessageBox::about(this, &quot;关于&quot;, &quot;Copyright 2016~2017&quot;);&#125;);QAction *p4 = menu-&gt;addAction(&quot;问题对话框&quot;);connect(p4, &amp;QAction::triggered, [=]() &#123; int ret = QMessageBox::question(this, &quot;question&quot;, &quot;Are you ok?&quot;); switch (ret) &#123; case QMessageBox::Yes: qDebug() &lt;&lt; &quot;I&apos;m ok&quot;; break; case QMessageBox::No: qDebug() &lt;&lt; &quot;I&apos;m not ok&quot;; break; &#125;&#125;);QAction *p5 = menu-&gt;addAction(&quot;文件对话框&quot;);connect(p5, &amp;QAction::triggered, [=]() &#123; QString path = QFileDialog::getOpenFileName(this, &quot;open&quot;, &quot;../&quot;, &quot;souce(*.cpp*.h);;Text(*.txt);;All(*.*)&quot; ); qDebug() &lt;&lt; path;&#125;);]]></content>
      <tags>
        <tag>工程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习笔记]]></title>
    <url>%2F2017%2F05%2F15%2FGithub%2F</url>
    <content type="text"><![CDATA[git命令整理基本概念 仓库(Repository)：用来存放项目代码。 收藏(Star)：就是收藏 分叉(fork)：复制一个项目，作为个人项目修改。 合并请求(Pull request) 关注(Watch) (lssue) 命令 git config —global user.name ‘’ git config —global user.email ‘’ git init：初始化仓库 git status：文件状态 git add ：加入到缓存区 git commit -m “” ：添加到库中 git log：日志 git log —pretty=oneline ：简略版日志 git reset —hard 3628164 ：会到历史版本 git reset —hard HEAD^ ：回到上一个版本 git reflog ：用来记录你的每一个命令 git reset HEAD readme.txt ：撤回 git checkout — : 用版本库里的版本替换工作区的版本 关联远程库 ssh-keygen -t rsa -C “youremail@example.com” git remote add origin git@github.com:michaelliao/learngit.git git push -u origin master 分支查看分支：git branch创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d 分支合并图：git log —graph 教程推荐Git教程]]></content>
      <tags>
        <tag>工程</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>